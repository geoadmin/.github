name: Milestone Release Reusable Workflow

# Tag and create a Release for milestone workflow. The repository is tagged
# based on the milestone title which should be in the form YYYY-MM-DD. The
# tag is then <MILESTONE>-rc<X> where X is a milestone build number starting from 1.
# The github release is then generated with release notes. The release notes are
# generated from the PR titles.
# Also remove milestone branch protection, delete the milestone branch and set the
# default branch back to master.

# Usage example
# on:
#   pull_request:
#     types:
#       - closed
#     branches:
#       - master

# jobs:
#   release:
#     uses: geoadmin/.github/.github/workflows/milestone-release.yml@master
#     secrets: inherit

on:
  workflow_call:
    secrets:
      MY_SECRET:
        required: true

jobs:
  delete-milestone-branch:
    name: Delete Milestone Branch Protection
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.head_ref, 'develop-') }}
    steps:
    - uses: actions/checkout@v2
    - name: Delete Milestone Branch Protection
      env:
        GITHUB_TOKEN: ${{ secrets.MY_SECRET }}
        HUB_VERBOSE: 0
      run: |
        set +e
        if response=$(hub api -X DELETE /repos/${{ github.repository }}/branches/${{ github.head_ref }}/protection);
        then
          set -e
          # 200 OK
          echo "::notice::Milestone Branch Protection deleted"
        else
          set -e
          # NOT 200 OK
          message=$(echo "${response}" | jq --raw-output '.message')
          echo "response=${response}"
          echo "message=${message}"
          if [[ "${message}" == "Branch not protected" ]] || [[ "${message}" == "Branch not found" ]]; then
            echo "::notice::Milestone Branch Protection already deleted"
          else
            echo "::error::Failed to delete branch protection: ${message}"
            exit 1
          fi
        fi
    - name: Delete Milestone Branch
      env:
        GITHUB_TOKEN: ${{ secrets.MY_SECRET }}
        HUB_VERBOSE: 0
      run: |
        set +e
        if response=$(hub api -X DELETE /repos/${{ github.repository }}/git/refs/heads/${{ github.head_ref }});
        then
          set -e
          # 200 OK
          echo "::notice::Milestone Branch deleted"
        else
          set -e
          # NOT 200 OK
          message=$(echo "${response}" | jq --raw-output '.message')
          echo "response=${response}"
          echo "message=${message}"
          if [[ "${message}" == "Reference does not exist" ]]; then
            echo "::notice::Milestone Branch already deleted"
          else
            echo "::error::Failed to delete milestone branch: ${message}"
            exit 1
          fi
        fi


  set-default-branch:
    name: Set default branch back to master
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.head_ref, 'develop-') }}
    steps:
    - name: Set default branch back to master
      env:
        GITHUB_TOKEN: ${{ secrets.MY_SECRET }}
      run: |
        gh repo edit ${{ github.repository }} --default-branch master


  milestone-release:
    name: Release Milestone
    runs-on: ubuntu-latest
    steps:
    - name: Check event name
      run: |
        echo "Event is ${{ github.event_name }}"
        if [[ "${{ github.event_name }}" != "pull_request" ]]; then
          echo "::error::Milestone Release Workflow can only be used with pull_request event"
          exit 1
        fi

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Bump Milestone Tag
      id: tagging
      uses: geoadmin/action-milestone-tag@v1.3.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: '${MILESTONE}-rc${TAG_NUMBER}'
        milestone_pattern: '\d{4}-\d{2}-\d{2}'

    # Drafts your next Release notes as Pull Requests are merged into "master"
    - name: Create Release with Release Notes
      uses: release-drafter/release-drafter@v5
      if: ${{ github.base_ref == 'master' }}
      with:
        config-name: release-drafter-config.yml
        disable-autolabeler: true
        publish: true
        tag: ${{ steps.tagging.outputs.new_tag }}
        version: ${{ steps.tagging.outputs.new_tag }}
        name: ${{ steps.tagging.outputs.new_tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Close the milestone if needed
    - name: Get milestone name from tag
      if: ${{ startsWith(github.head_ref, 'develop-') }}
      id: get-milestone
      shell: bash
      run: |
        tag=${{ steps.tagging.outputs.new_tag }}
        milestone=${tag%%-rc*}
        echo "::set-output name=milestone::${milestone}"
        echo "::notice::Milestone is ${milestone}"
    - name: Close the milestone if needed
      if: ${{ startsWith(github.head_ref, 'develop-') }}
      uses: "julb/action-manage-milestone@v1"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        title: ${{ steps.get-milestone.outputs.milestone }}
        state: closed

