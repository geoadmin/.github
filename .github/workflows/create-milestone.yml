name: Create Milestone from branch name Reusable Workflow

# If the branch name match the milestone branch pattern develop-YYYY-MM-DD, then the milestone
# name YYYY-MM-DD is created if it not already exists. It also create a milestone branch protection
# and set the default branch to the milestone branch.
#
# Usage example
#--------------
# on:
#  create:
#
#jobs:
#  create-milestone:
#    uses: geoadmin/.github/.github/workflows/create-milestone.yml@master
#    secrets: inherit
#    with:
#      ci_status_check_name: 'AWS CodeBuild eu-central-1 (CODEBUILD_PROJECT_NAME)'

on:
  workflow_call:
    inputs:
      ci_status_check_name:
        default: ''
        type: string
        description: 'CI status check name that must pass for merging. Set to empty string to disable check.'
    secrets:
      REPO_ACCESS_TOKEN:
        required: true

jobs:
  get-milestone:
    name: Check if it's a milestone branch
    runs-on: ubuntu-latest
    outputs:
      milestone: ${{ steps.get-milestone.outputs.milestone }}
      branch: ${{ steps.get-milestone.outputs.branch }}
    steps:
      - name: Get Milestone from branch name
        id: get-milestone
        shell: bash
        run: |
            echo "::notice::Branch \"${GITHUB_REF}\" created"
            branch_prefix=develop-
            pattern=^refs/heads/${branch_prefix}[0-9]{4}-[0-9]{2}-[0-9]{2}$
            if [[ "${GITHUB_REF}" =~ $pattern ]]; then
              echo "::notice::${GITHUB_REF} is a milestone branch"
              milestone=${GITHUB_REF#refs/heads/${branch_prefix}}
              echo "::set-output name=milestone::${milestone}"
              echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
              echo "::notice::Milestone is ${milestone}"
            fi

  create-milestone-branch-protection:
    name: Create Milestone Branch Protection
    needs: get-milestone
    if: "${{ needs.get-milestone.outputs.milestone }}"
    runs-on: ubuntu-latest
    steps:
      - name: Create Milestone Branch Protection
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          HUB_VERBOSE: 0
        run: |
          required_status_checks=null
          if [[ -n "${{ inputs.ci_status_check_name }}" ]];
          then
            # NOTE: we cannot set "strict" to true here otherwise we cannot update the milestone
            # branch with the master hotfixes. (strict means "Require branches to be up to date before merging.")
            required_status_checks=$(cat <<-END
              {
                "strict": false,
                "contexts": [
                  "${{ inputs.ci_status_check_name }}"
                ]
              }
          END)
          fi

          hub api -i -X PUT /repos/${{ github.repository }}/branches/${{ needs.get-milestone.outputs.branch }}/protection \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            --input "-" <<STDIN
          {
            "required_status_checks": ${required_status_checks},
            "enforce_admins": true,
            "restrictions": null,
            "required_pull_request_reviews": {"required_approving_review_count": 1}
          }
          STDIN
          echo "::notice::Milestone Branch Protection \"${{ needs.get-milestone.outputs.branch }}\" created"

  set-default-branch:
    name: Set default branch to milestone branch
    needs: get-milestone
    if: "${{ needs.get-milestone.outputs.milestone }}"
    runs-on: ubuntu-latest
    steps:
      - name: Set default branch to milestone
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          # Get the next milestone branch
          next_milestone_branch=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/branches | \
            jq '. | map(select(.name | test("^develop-\\d{4}-\\d{2}-\\d{2}$"))) | sort_by(.name) | .[0].name ' -r)
          if [[ "${next_milestone_branch}" != "null" ]];
          then
            echo "::notice::Set default branch to \"${next_milestone_branch}\""
            gh repo edit ${{ github.repository }} --default-branch ${next_milestone_branch}
          else
            echo "::warning::No milestone branch found !"
          fi

  create-milestone:
    name: Create Milestone
    needs: get-milestone
    if: "${{ needs.get-milestone.outputs.milestone }}"
    runs-on: ubuntu-latest
    steps:
      - name: Create Milestone if it not exists
        uses: "julb/action-manage-milestone@v1"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: "${{ needs.get-milestone.outputs.milestone }}"
          state: open
          due_on: "${{ needs.get-milestone.outputs.milestone }}"

